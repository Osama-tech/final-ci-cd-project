version: 2.1

commands:

  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
      workflow_id:
         type: string
      event: 
         type: string
    steps:
      - run:
          name: Install AWS CLI if required
          when: on_fail
          command: |
            if ! [ -x "$(command -v aws)" ]
            then
              #if no npm, then python env
              if ! [ -x "$(command -v npm)" ]
              then 
                pip install awscli
              else
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" 
                unzip awscliv2.zip 
                sudo ./aws/install
              fi
            else
              echo "AWS CLI already installed"
            fi
            
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Delete the following"
            echo "udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
            echo "ci-cd-frontend-${CIRCLE_WORKFLOW_ID:0:7} stack"
            echo "ci-cd-project-backend-${CIRCLE_WORKFLOW_ID:0:7} stack"
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
            aws cloudformation delete-stack --stack-name ci-cd-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name ci-cd-project-backend-${CIRCLE_WORKFLOW_ID:0:7}
            
  cancel_migrations:
    description: cancel last migration  step if successfully run in the current workflow.
    parameters:
      workflow_id: 
        type: string
      event: 
        type: string
      
    steps:
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/4VnmEQtb22mcDLVUwHnG5q/migration_$\{CIRCLE_WORKFLOW_ID:0:7\})
            if [[ $SUCCESS == 1 ]];
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert the successful migration
            fi          
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm i
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
             cd frontend
             npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
             # Your code here
             cd backend
             npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end scan
          command: |
             # Your code here
             cd frontend
             npm install                                                                   
             npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
      
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end scan
          command: |
             # Your code here
             cd backend         
             npm install                                                                   
             npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      
      - run: 
          name: install tar & gzip
          command: |
            yum -y install tar
            yum -y install gzip
            
      - run:
          name: Ensure back-end infrastructure is exist
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "ci-cd-project-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
                
#             aws cloudformation deploy \
#                 --template-file .circleci/files/backend.yml \
#                 --stack-name "ci-cd-project-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#                 --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
#                 --tags project=udapeople
                
      - run:
          name: Ensure front-end infrastructure is exist
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "ci-cd-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople 
                
      - run:
          name: Add EC2 instance (back-end) ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values= backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> ./.circleci/ansible/inventory.txt
            cat ./.circleci/ansible/inventory.txt
            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail
          
      - cancel_migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["6f:0e:87:a3:1a:65:df:67:ad:ad:03:ba:ef:6b:9a:51"]
      - attach_workspace:
          at: ~/
          
      - run:
          name: install the dependencies
          command: |
            apk add --update ansible
            
      - run:
          name: Configure server
          command: |
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
            
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail
          
      - cancel_migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail 

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
          
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations > migrations.txt
            cat migrations.txt
            
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." backend/migrations.txt
            then
               curl https://kvdb.io/HRdpkMwzTLpsUpsLBN2Z1f/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
            
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail
          
      - cancel_migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail   


  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
          
      - run:
          name: Install the dependencies
          command: |
            sudo apt-get update
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" 
            unzip awscliv2.zip 
            sudo ./aws/install
            
      - attach_workspace:
          at: ~/
          
      - run:
          name: Get backend url & deploy frontend objects
          command: |
            export BACKEND_IP=$(tail -1 ~/project/.circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            cd frontend
            npm i
            npm run build
            
      - run:
          name: Sync S3
          command: |
            aws s3 sync frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
            
#       - persist_to_workspace:
#           root: ~/
#           paths:
#             - api_url.txt
            
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail
          
      - cancel_migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["6f:0e:87:a3:1a:65:df:67:ad:ad:03:ba:ef:6b:9a:51"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
          
      - run:
          name: Install the dependencies
          command: |
            apk add --update ansible
            apk add --update npm
            apk add --update tar
            
      - run:
          name: Zip the directory
          command: |
            tar -C backend -czvf artifact.tar.gz .
            
      - run:
          name: Deploy backend
          command: |
            echo "Contents  of the inventory.txt file is ------"                                    
            cat ~/project/.circleci/ansible/inventory.txt                                                                       
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml -vvv
            
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail
          
      - cancel_migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail
          
  smoke-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install the dependencies
          command: |
            sudo apt install curl
            #sudo apt install awscli
            
      - attach_workspace:
          at: ~/  
           
      - run:
          name: Backend smoke test
          command: |
            export BACKEND_IP=$(tail -1 ~/project/.circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030/api/status"
            echo "API_URL: ${API_URL}"                                                      
            curl ${API_URL}
            
      - run:
          name: Frontend smoke test
          command: |
            export FRONTEND_IP="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"
            if curl -s ${FRONTEND_IP} | grep "Welcome"
            then
              exit 0                                                                       
            else
              exit 1                                                                    
            fi
            
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail
          
      - cancel_migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail


  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Save the old Workflow_ID & Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            
            echo $OldWorkflowID > oldWorkflowId.txt
            cat oldWorkflowId.txt 
            
            aws cloudformation update-stack \
            --use-previous-template \
            --stack-name initialStack \
            --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7}
            
            echo OldWorkflowID: "${OldWorkflowID}"
            echo Current Workflow ID: "${CIRCLE_WORKFLOW_ID:0:7}"
            
      - run:
          name: install tar utilities
          command: |
            yum install -y tar gzip
            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/oldWorkflowId.txt
            
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail
          
      - cancel_migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar
          command: |
            yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: fetch old stack workflow id & remove old stacks and files
          command: |
            export OldWorkflowID=$(cat ~/project/oldWorkflowId.txt)
            echo "$OldWorkflowID"
            
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo "$STACKS"
            
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws s3 rb s3://udapeople-${OldWorkflowID} --force
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              echo "Stacks deleted succesfully"
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          filters:
            branches:
              only: [master]
      - run-migrations:
          requires: [configure-infrastructure]
          filters:
            branches:
              only: [master]
      - deploy-frontend:
          requires: [run-migrations]
          filters:
            branches:
              only: [master]
      - deploy-backend:
          requires: [run-migrations]
          filters:
            branches:
              only: [master]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
          filters:
            branches:
              only: [master]
      - cloudfront-update:
          requires: [smoke-test]
          filters:
            branches:
              only: [master]
      - cleanup:
          requires: [cloudfront-update]
          filters:
            branches:
              only: [master]
